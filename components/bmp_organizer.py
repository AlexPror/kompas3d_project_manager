#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üìÅ –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä BMP —Ñ–∞–π–ª–æ–≤
–°–æ–∑–¥–∞–µ—Ç –ø–∞–ø–∫—É BMP –∏ –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç —Ç—É–¥–∞ –≤—Å–µ BMP —Ñ–∞–π–ª—ã –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞
"""

import logging
import shutil
from pathlib import Path
from typing import Dict


class BmpOrganizer:
    """–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä BMP —Ñ–∞–π–ª–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç–µ"""
    
    def __init__(self):
        self.logger = logging.getLogger('BmpOrganizer')
    
    def organize_bmp_files(self, project_path: str) -> Dict:
        """
        –û—Ä–≥–∞–Ω–∏–∑—É–µ—Ç BMP —Ñ–∞–π–ª—ã - —Å–æ–∑–¥–∞–µ—Ç –ø–∞–ø–∫—É BMP –∏ –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç —Ç—É–¥–∞ —Ñ–∞–π–ª—ã
        
        Args:
            project_path: –ü—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
            
        Returns:
            dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
        """
        try:
            project_path = Path(project_path)
            
            if not project_path.exists():
                return {
                    'success': False,
                    'error': '–ü–∞–ø–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
                }
            
            self.logger.info(f"–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è BMP —Ñ–∞–π–ª–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç–µ: {project_path.name}")
            
            # –ò—â–µ–º –≤—Å–µ BMP —Ñ–∞–π–ª—ã –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞
            bmp_files = list(project_path.glob('*.bmp'))
            
            if not bmp_files:
                self.logger.info("BMP —Ñ–∞–π–ª–æ–≤ –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return {
                    'success': True,
                    'moved_count': 0,
                    'message': '–ù–µ—Ç BMP —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏'
                }
            
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É BMP
            bmp_folder = project_path / 'BMP'
            bmp_folder.mkdir(exist_ok=True)
            self.logger.info(f"–°–æ–∑–¥–∞–Ω–∞/–ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ –ø–∞–ø–∫–∞: {bmp_folder}")
            
            # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ñ–∞–π–ª—ã
            moved_count = 0
            errors = []
            
            for bmp_file in bmp_files:
                try:
                    target_path = bmp_folder / bmp_file.name
                    
                    # –ï—Å–ª–∏ —Ñ–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Ü–µ–ª–µ–≤–æ–π –ø–∞–ø–∫–µ, —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π
                    if target_path.exists():
                        target_path.unlink()
                    
                    shutil.move(str(bmp_file), str(target_path))
                    moved_count += 1
                    self.logger.info(f"  ‚úì {bmp_file.name} ‚Üí BMP/")
                    
                except Exception as e:
                    error_msg = f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è {bmp_file.name}: {e}"
                    self.logger.error(f"  ‚úó {error_msg}")
                    errors.append(error_msg)
            
            result = {
                'success': True,
                'moved_count': moved_count,
                'total_count': len(bmp_files),
                'bmp_folder': str(bmp_folder),
                'errors': errors
            }
            
            if moved_count > 0:
                self.logger.info(f"‚úÖ –ü–µ—Ä–µ–º–µ—â–µ–Ω–æ BMP —Ñ–∞–π–ª–æ–≤: {moved_count}/{len(bmp_files)}")
            
            if errors:
                self.logger.warning(f"‚ö†Ô∏è –û—à–∏–±–æ–∫ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏: {len(errors)}")
            
            return result
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ BMP —Ñ–∞–π–ª–æ–≤: {e}")
            return {
                'success': False,
                'error': str(e)
            }
    
    def get_bmp_folder_path(self, project_path: str) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ BMP (—Å–æ–∑–¥–∞–µ—Ç –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)"""
        bmp_folder = Path(project_path) / 'BMP'
        bmp_folder.mkdir(exist_ok=True)
        return str(bmp_folder)

