#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üìö –ú–µ–Ω–µ–¥–∂–µ—Ä —à–∞–±–ª–æ–Ω–æ–≤ –ø—Ä–æ–µ–∫—Ç–æ–≤
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–æ–Ω–≤–µ–∫—Ç–æ—Ä–æ–≤
"""

import json
import logging
import shutil
from pathlib import Path
from datetime import datetime
from typing import Dict, List, Optional


class TemplateManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —à–∞–±–ª–æ–Ω–æ–≤ –ø—Ä–æ–µ–∫—Ç–æ–≤"""
    
    def __init__(self, templates_dir: str = "templates"):
        self.logger = logging.getLogger('TemplateManager')
        self.templates_dir = Path(templates_dir)
        self.templates_dir.mkdir(exist_ok=True)
        
        # –§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤
        self.db_file = self.templates_dir / 'templates_db.json'
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        self.db = self._load_database()
    
    def _load_database(self) -> Dict:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤"""
        if self.db_file.exists():
            try:
                with open(self.db_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–∑—ã —à–∞–±–ª–æ–Ω–æ–≤: {e}")
                return {'templates': [], 'version': '1.0'}
        else:
            return {'templates': [], 'version': '1.0'}
    
    def _save_database(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤"""
        try:
            with open(self.db_file, 'w', encoding='utf-8') as f:
                json.dump(self.db, f, ensure_ascii=False, indent=2)
            return True
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –±–∞–∑—ã —à–∞–±–ª–æ–Ω–æ–≤: {e}")
            return False
    
    def list_templates(self) -> List[Dict]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤
        
        Returns:
            list: –°–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
        """
        return self.db.get('templates', [])
    
    def get_template(self, template_id: str) -> Optional[Dict]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —à–∞–±–ª–æ–Ω–µ –ø–æ ID
        
        Args:
            template_id: ID —à–∞–±–ª–æ–Ω–∞
            
        Returns:
            dict: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —à–∞–±–ª–æ–Ω–µ –∏–ª–∏ None
        """
        for template in self.db['templates']:
            if template['id'] == template_id:
                return template
        return None
    
    def add_template_from_project(self, 
                                  project_path: str,
                                  template_name: str,
                                  description: str = "",
                                  parameters: Dict = None,
                                  tags: List[str] = None) -> Dict:
        """
        –°–æ–∑–¥–∞–µ—Ç —à–∞–±–ª–æ–Ω –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
        
        Args:
            project_path: –ü—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
            template_name: –ù–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞
            description: –û–ø–∏—Å–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞
            parameters: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã (H, B1, L1 –∏ —Ç.–¥.)
            tags: –¢–µ–≥–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞
            
        Returns:
            dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
        """
        try:
            self.logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ '{template_name}' –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞...")
            
            project_path = Path(project_path)
            
            if not project_path.exists():
                return {'success': False, 'error': '–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'}
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
            template_id = f"tpl_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
            
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —à–∞–±–ª–æ–Ω–∞
            template_folder = self.templates_dir / template_id
            template_folder.mkdir(exist_ok=True)
            
            # –ö–æ–ø–∏—Ä—É–µ–º –ø—Ä–æ–µ–∫—Ç
            self.logger.info(f"–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –≤ {template_folder}...")
            copied_count = 0
            
            for item in project_path.iterdir():
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã, –∞—Ä—Ö–∏–≤—ã –∏ —Å–ª—É–∂–µ–±–Ω—ã–µ –ø–∞–ø–∫–∏
                if item.name.startswith('~$'):
                    continue
                if item.suffix in ['.bak', '.tmp']:
                    continue
                if item.name.endswith('.rar') or item.name.endswith('.zip'):
                    continue
                if 'A-' in item.name and item.is_dir():  # –ü–∞–ø–∫–∏ —Å –Ω–æ–º–µ—Ä–æ–º –∑–∞–∫–∞–∑–∞
                    continue
                if item.name in ['BMP', 'PDF', '–ò—Å—Ö–æ–¥–Ω–∏–∫–∏ —Ä–∞–∑–≤–µ—Ä—Ç–æ–∫ —Å –Ω–æ–º–µ—Ä–∞–º–∏']:
                    continue
                
                try:
                    target = template_folder / item.name
                    
                    if item.is_file():
                        shutil.copy2(item, target)
                        copied_count += 1
                    elif item.is_dir() and item.name == 'DXF':
                        # DXF –ø–∞–ø–∫—É —Ç–æ–∂–µ –Ω–µ –∫–æ–ø–∏—Ä—É–µ–º - –æ–Ω–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è
                        pass
                    elif item.is_dir():
                        shutil.copytree(item, target)
                        copied_count += 1
                        
                except Exception as e:
                    self.logger.warning(f"–ü—Ä–æ–ø—É—Å–∫ {item.name}: {e}")
            
            self.logger.info(f"–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {copied_count}")
            
            # –°–æ–∑–¥–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω–∞
            template_info = {
                'id': template_id,
                'name': template_name,
                'description': description,
                'created_at': datetime.now().isoformat(),
                'parameters': parameters or {},
                'tags': tags or [],
                'path': str(template_folder),
                'source_project': str(project_path),
                'file_count': copied_count,
                'usage_count': 0
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –±–∞–∑—É
            self.db['templates'].append(template_info)
            self._save_database()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º README –¥–ª—è —à–∞–±–ª–æ–Ω–∞
            self._create_template_readme(template_folder, template_info)
            
            self.logger.info(f"‚úÖ –®–∞–±–ª–æ–Ω '{template_name}' —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
            self.logger.info(f"   ID: {template_id}")
            self.logger.info(f"   –ü—É—Ç—å: {template_folder}")
            
            return {
                'success': True,
                'template_id': template_id,
                'template_info': template_info
            }
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞: {e}")
            return {
                'success': False,
                'error': str(e)
            }
    
    def _create_template_readme(self, template_folder: Path, template_info: Dict):
        """–°–æ–∑–¥–∞–µ—Ç README —Ñ–∞–π–ª –¥–ª—è —à–∞–±–ª–æ–Ω–∞"""
        readme_content = f"""# {template_info['name']}

## –û–ø–∏—Å–∞–Ω–∏–µ
{template_info.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}

## –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
"""
        
        params = template_info.get('parameters', {})
        if params:
            for key, value in params.items():
                readme_content += f"- **{key}**: {value}\n"
        else:
            readme_content += "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã\n"
        
        readme_content += f"""
## –¢–µ–≥–∏
{', '.join(template_info.get('tags', ['–Ω–µ—Ç —Ç–µ–≥–æ–≤']))}

## –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
- **ID**: `{template_info['id']}`
- **–°–æ–∑–¥–∞–Ω**: {template_info['created_at']}
- **–ò—Å—Ç–æ—á–Ω–∏–∫**: `{template_info.get('source_project', '–Ω–µ —É–∫–∞–∑–∞–Ω')}`
- **–§–∞–π–ª–æ–≤**: {template_info.get('file_count', 0)}

---
*–®–∞–±–ª–æ–Ω —Å–æ–∑–¥–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ö–û–ú–ü–ê–°-3D Project Manager*
"""
        
        readme_file = template_folder / 'README.md'
        with open(readme_file, 'w', encoding='utf-8') as f:
            f.write(readme_content)
    
    def delete_template(self, template_id: str) -> Dict:
        """
        –£–¥–∞–ª—è–µ—Ç —à–∞–±–ª–æ–Ω
        
        Args:
            template_id: ID —à–∞–±–ª–æ–Ω–∞
            
        Returns:
            dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
        """
        try:
            template = self.get_template(template_id)
            
            if not template:
                return {'success': False, 'error': '–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω'}
            
            # –£–¥–∞–ª—è–µ–º –ø–∞–ø–∫—É
            template_folder = Path(template['path'])
            if template_folder.exists():
                shutil.rmtree(template_folder)
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ –±–∞–∑—ã
            self.db['templates'] = [t for t in self.db['templates'] if t['id'] != template_id]
            self._save_database()
            
            self.logger.info(f"‚úÖ –®–∞–±–ª–æ–Ω '{template['name']}' —É–¥–∞–ª–µ–Ω")
            
            return {'success': True}
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞: {e}")
            return {'success': False, 'error': str(e)}
    
    def update_template_usage(self, template_id: str):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞"""
        for template in self.db['templates']:
            if template['id'] == template_id:
                template['usage_count'] = template.get('usage_count', 0) + 1
                template['last_used'] = datetime.now().isoformat()
                self._save_database()
                break
    
    def search_templates(self, query: str) -> List[Dict]:
        """
        –ü–æ–∏—Å–∫ —à–∞–±–ª–æ–Ω–æ–≤ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é, –æ–ø–∏—Å–∞–Ω–∏—é –∏–ª–∏ —Ç–µ–≥–∞–º
        
        Args:
            query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            
        Returns:
            list: –ù–∞–π–¥–µ–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã
        """
        query_lower = query.lower()
        results = []
        
        for template in self.db['templates']:
            # –ü–æ–∏—Å–∫ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
            if query_lower in template['name'].lower():
                results.append(template)
                continue
            
            # –ü–æ–∏—Å–∫ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏
            if query_lower in template.get('description', '').lower():
                results.append(template)
                continue
            
            # –ü–æ–∏—Å–∫ –≤ —Ç–µ–≥–∞—Ö
            if any(query_lower in tag.lower() for tag in template.get('tags', [])):
                results.append(template)
                continue
        
        return results
    
    def get_template_statistics(self) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —à–∞–±–ª–æ–Ω–∞–º"""
        templates = self.db['templates']
        
        if not templates:
            return {
                'total': 0,
                'most_used': None,
                'newest': None
            }
        
        # –°–∞–º—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π
        most_used = max(templates, key=lambda t: t.get('usage_count', 0))
        
        # –°–∞–º—ã–π –Ω–æ–≤—ã–π
        newest = max(templates, key=lambda t: t['created_at'])
        
        return {
            'total': len(templates),
            'most_used': {
                'name': most_used['name'],
                'usage_count': most_used.get('usage_count', 0)
            },
            'newest': {
                'name': newest['name'],
                'created_at': newest['created_at']
            }
        }

