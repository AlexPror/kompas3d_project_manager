#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üîß –ö–û–ú–ü–ê–°-3D Project Manager
GUI –Ω–∞ CustomTkinter —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º
"""

import sys
import logging
import threading
import time
from pathlib import Path
from tkinter import filedialog
from datetime import datetime

import customtkinter as ctk
from components.project_copier import ProjectCopier
from components.cascading_variables_updater import CascadingVariablesUpdater
from components.designation_updater_fixed import DesignationUpdaterFixed
from components.dxf_renamer import DxfRenamer
from components.drawing_auto_updater import DrawingAutoUpdater
from components.drawing_exporter import DrawingExporter
from components.unfolding_dxf_exporter import UnfoldingDxfExporter
from components.bmp_organizer import BmpOrganizer
from components.template_manager import TemplateManager

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ–¥–∏—Ä–æ–≤–∫–∏
sys.stdout.reconfigure(encoding='utf-8')
sys.stderr.reconfigure(encoding='utf-8')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CustomTkinter
ctk.set_appearance_mode("dark")  # –¢–µ–º–Ω–∞—è —Ç–µ–º–∞
ctk.set_default_color_theme("blue")  # –°–∏–Ω—è—è —Ü–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞


class TextHandler(logging.Handler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–æ–≥–æ–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ GUI"""
    
    def __init__(self, text_widget):
        super().__init__()
        self.text_widget = text_widget
    
    def emit(self, record):
        msg = self.format(record)
        
        def append():
            self.text_widget.configure(state='normal')
            self.text_widget.insert('end', msg + '\n')
            self.text_widget.see('end')
            self.text_widget.configure(state='disabled')
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤—ã–∑–æ–≤ –∏–∑ –¥—Ä—É–≥–æ–≥–æ –ø–æ—Ç–æ–∫–∞
        self.text_widget.after(0, append)


class KompasManagerGUI(ctk.CTk):
    """–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    def __init__(self):
        super().__init__()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫–Ω–∞
        self.title("üîß –ö–û–ú–ü–ê–°-3D Project Manager")
        self.geometry("1200x800")
        
        # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.copier = ProjectCopier()
        self.updater = CascadingVariablesUpdater()
        self.designation_updater = DesignationUpdaterFixed()
        self.dxf_exporter = UnfoldingDxfExporter()
        self.dxf_renamer = DxfRenamer()
        self.drawing_updater = DrawingAutoUpdater()
        self.drawing_exporter = DrawingExporter()
        self.bmp_organizer = BmpOrganizer()
        self.template_manager = TemplateManager()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        self.setup_logging()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.create_widgets()
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.current_project_path = None
        self.is_processing = False
        
        self.logger.info("="*60)
        self.logger.info("–ö–û–ú–ü–ê–°-3D Project Manager –∑–∞–ø—É—â–µ–Ω!")
        self.logger.info("="*60)
        self.logger.info("–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ. –í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ö–æ–¥–Ω—ã–π –ø—Ä–æ–µ–∫—Ç –¥–ª—è –Ω–∞—á–∞–ª–∞.\n")
    
    def setup_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        # –û—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–≥–µ—Ä
        self.logger = logging.getLogger('KompasManager')
        self.logger.setLevel(logging.INFO)
        
        # –§–æ—Ä–º–∞—Ç –ª–æ–≥–æ–≤
        formatter = logging.Formatter(
            '%(asctime)s | %(levelname)-8s | %(message)s',
            datefmt='%H:%M:%S'
        )
        
        # –§–∞–π–ª–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        file_handler = logging.FileHandler('kompas_manager.log', encoding='utf-8')
        file_handler.setFormatter(formatter)
        self.logger.addHandler(file_handler)
        
        # Console handler (–±—É–¥–µ—Ç –∑–∞–º–µ–Ω–µ–Ω –Ω–∞ GUI –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–∂–µ—Ç–∞)
        self.console_handler = logging.StreamHandler()
        self.console_handler.setFormatter(formatter)
        self.logger.addHandler(self.console_handler)
    
    def setup_gui_logging(self, text_widget):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—ã–≤–æ–¥–∞ –ª–æ–≥–æ–≤ –≤ GUI"""
        # –£–¥–∞–ª—è–µ–º –∫–æ–Ω—Å–æ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        self.logger.removeHandler(self.console_handler)
        
        # –î–æ–±–∞–≤–ª—è–µ–º GUI –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        gui_handler = TextHandler(text_widget)
        formatter = logging.Formatter(
            '%(asctime)s | %(message)s',
            datefmt='%H:%M:%S'
        )
        gui_handler.setFormatter(formatter)
        self.logger.addHandler(gui_handler)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–≥–µ—Ä—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        for component_logger in [
            logging.getLogger('ProjectCopier'),
            logging.getLogger('CascadingVariablesUpdater'),
            logging.getLogger('DesignationUpdaterFixed'),
            logging.getLogger('UnfoldingDxfExporter'),
            logging.getLogger('dxf_renamer'),
            logging.getLogger('DrawingAutoUpdater'),
            logging.getLogger('DrawingExporter'),
            logging.getLogger('BaseKompasComponent')
        ]:
            component_logger.setLevel(logging.INFO)
            component_logger.addHandler(gui_handler)
    
    def create_widgets(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        
        # –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏
        main_container = ctk.CTkFrame(self, fg_color="transparent")
        main_container.pack(fill="both", expand=True, padx=20, pady=20)
        
        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å (—Ñ–æ—Ä–º—ã)
        left_panel = ctk.CTkFrame(main_container)
        left_panel.pack(side="left", fill="both", expand=True, padx=(0, 10))
        
        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å (–ª–æ–≥–∏)
        right_panel = ctk.CTkFrame(main_container)
        right_panel.pack(side="right", fill="both", expand=True, padx=(10, 0))
        
        # =========================
        # –õ–ï–í–ê–Ø –ü–ê–ù–ï–õ–¨: –§–û–†–ú–´
        # =========================
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = ctk.CTkLabel(
            left_panel,
            text="üîß –ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–µ–∫—Ç–æ–≤ –ö–û–ú–ü–ê–°-3D",
            font=ctk.CTkFont(size=24, weight="bold")
        )
        title.pack(pady=(10, 20))
        
        # –°–ï–ö–¶–ò–Ø 1: –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
        self.create_copy_section(left_panel)
        
        # –°–ï–ö–¶–ò–Ø 2: –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        self.create_variables_section(left_panel)
        
        # –°–ï–ö–¶–ò–Ø 3: –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        self.create_quick_actions_section(left_panel)
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        self.progress_bar = ctk.CTkProgressBar(left_panel, mode="indeterminate")
        self.progress_bar.pack(fill="x", padx=20, pady=10)
        self.progress_bar.pack_forget()  # –°–∫—Ä—ã–≤–∞–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        # =========================
        # –ü–†–ê–í–ê–Ø –ü–ê–ù–ï–õ–¨: –õ–û–ì–ò
        # =========================
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ª–æ–≥–æ–≤
        log_title = ctk.CTkLabel(
            right_panel,
            text="üìã –õ–æ–≥ –æ–ø–µ—Ä–∞—Ü–∏–π",
            font=ctk.CTkFont(size=20, weight="bold")
        )
        log_title.pack(pady=(10, 10))
        
        # –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è –ª–æ–≥–æ–≤
        self.log_text = ctk.CTkTextbox(
            right_panel,
            font=ctk.CTkFont(family="Consolas", size=11),
            wrap="word"
        )
        self.log_text.pack(fill="both", expand=True, padx=10, pady=(0, 10))
        self.log_text.configure(state='disabled')
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ GUI –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        self.setup_gui_logging(self.log_text)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–æ–º
        log_buttons_frame = ctk.CTkFrame(right_panel, fg_color="transparent")
        log_buttons_frame.pack(fill="x", padx=10, pady=(0, 10))
        
        clear_log_btn = ctk.CTkButton(
            log_buttons_frame,
            text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥",
            command=self.clear_log,
            width=140,
            height=32
        )
        clear_log_btn.pack(side="left", padx=(0, 5))
        
        save_log_btn = ctk.CTkButton(
            log_buttons_frame,
            text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–æ–≥",
            command=self.save_log,
            width=140,
            height=32
        )
        save_log_btn.pack(side="left")
    
    def create_copy_section(self, parent):
        """–°–µ–∫—Ü–∏—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞"""
        section = ctk.CTkFrame(parent)
        section.pack(fill="x", padx=20, pady=10)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏
        section_title = ctk.CTkLabel(
            section,
            text="üìÅ –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞",
            font=ctk.CTkFont(size=16, weight="bold")
        )
        section_title.pack(pady=(15, 10), padx=15, anchor="w")
        
        # –ò—Å—Ö–æ–¥–Ω—ã–π –ø—Ä–æ–µ–∫—Ç
        source_frame = ctk.CTkFrame(section, fg_color="transparent")
        source_frame.pack(fill="x", padx=15, pady=5)
        
        ctk.CTkLabel(source_frame, text="–ò—Å—Ö–æ–¥–Ω—ã–π –ø—Ä–æ–µ–∫—Ç:", width=120, anchor="w").pack(side="left")
        self.source_entry = ctk.CTkEntry(source_frame, placeholder_text="–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞...")
        self.source_entry.pack(side="left", fill="x", expand=True, padx=5)
        
        source_btn = ctk.CTkButton(
            source_frame,
            text="üìÇ –û–±–∑–æ—Ä",
            command=self.select_source,
            width=100
        )
        source_btn.pack(side="left")
        
        # –¶–µ–ª–µ–≤–∞—è –ø–∞–ø–∫–∞
        target_frame = ctk.CTkFrame(section, fg_color="transparent")
        target_frame.pack(fill="x", padx=15, pady=5)
        
        ctk.CTkLabel(target_frame, text="–¶–µ–ª–µ–≤–∞—è –ø–∞–ø–∫–∞:", width=120, anchor="w").pack(side="left")
        self.target_entry = ctk.CTkEntry(target_frame, placeholder_text="–ö—É–¥–∞ –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å...")
        self.target_entry.pack(side="left", fill="x", expand=True, padx=5)
        
        target_btn = ctk.CTkButton(
            target_frame,
            text="üìÇ –û–±–∑–æ—Ä",
            command=self.select_target,
            width=100
        )
        target_btn.pack(side="left")
        
        # –ò–º—è –ø—Ä–æ–µ–∫—Ç–∞
        name_frame = ctk.CTkFrame(section, fg_color="transparent")
        name_frame.pack(fill="x", padx=15, pady=5)
        
        ctk.CTkLabel(name_frame, text="–ò–º—è –ø—Ä–æ–µ–∫—Ç–∞:", width=120, anchor="w").pack(side="left")
        self.project_name_entry = ctk.CTkEntry(name_frame, placeholder_text="ZVD.LITE.160.350.2600")
        self.project_name_entry.pack(side="left", fill="x", expand=True, padx=5)
        
        # –ö–Ω–æ–ø–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
        copy_btn = ctk.CTkButton(
            section,
            text="üìÅ –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–µ–∫—Ç",
            command=self.copy_project,
            height=40,
            font=ctk.CTkFont(size=14, weight="bold")
        )
        copy_btn.pack(fill="x", padx=15, pady=(10, 15))
    
    def create_variables_section(self, parent):
        """–°–µ–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö"""
        section = ctk.CTkFrame(parent)
        section.pack(fill="x", padx=20, pady=10)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏
        section_title = ctk.CTkLabel(
            section,
            text="üîß –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö",
            font=ctk.CTkFont(size=16, weight="bold")
        )
        section_title.pack(pady=(15, 10), padx=15, anchor="w")
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
        vars_frame = ctk.CTkFrame(section, fg_color="transparent")
        vars_frame.pack(fill="x", padx=15, pady=5)
        
        # H
        h_frame = ctk.CTkFrame(vars_frame, fg_color="transparent")
        h_frame.pack(side="left", fill="x", expand=True, padx=5)
        ctk.CTkLabel(h_frame, text="H (–≤—ã—Å–æ—Ç–∞):", anchor="w").pack()
        self.h_entry = ctk.CTkEntry(h_frame, placeholder_text="160", justify="center")
        self.h_entry.pack(fill="x")
        
        # B1
        b1_frame = ctk.CTkFrame(vars_frame, fg_color="transparent")
        b1_frame.pack(side="left", fill="x", expand=True, padx=5)
        ctk.CTkLabel(b1_frame, text="B1 (—à–∏—Ä–∏–Ω–∞):", anchor="w").pack()
        self.b1_entry = ctk.CTkEntry(b1_frame, placeholder_text="350", justify="center")
        self.b1_entry.pack(fill="x")
        
        # L1
        l1_frame = ctk.CTkFrame(vars_frame, fg_color="transparent")
        l1_frame.pack(side="left", fill="x", expand=True, padx=5)
        ctk.CTkLabel(l1_frame, text="L1 (–¥–ª–∏–Ω–∞):", anchor="w").pack()
        self.l1_entry = ctk.CTkEntry(l1_frame, placeholder_text="2600", justify="center")
        self.l1_entry.pack(fill="x")
        
        # –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞
        order_frame = ctk.CTkFrame(section, fg_color="transparent")
        order_frame.pack(fill="x", padx=15, pady=(10, 5))
        
        ctk.CTkLabel(order_frame, text="–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):", width=200, anchor="w").pack(side="left")
        self.order_entry = ctk.CTkEntry(order_frame, placeholder_text="–ê-180925-1801")
        self.order_entry.pack(side="left", fill="x", expand=True, padx=5)
        
        # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        update_btn = ctk.CTkButton(
            section,
            text="üîß –û–±–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ",
            command=self.update_variables,
            height=40,
            font=ctk.CTkFont(size=14, weight="bold")
        )
        update_btn.pack(fill="x", padx=15, pady=(10, 15))
    
    def create_quick_actions_section(self, parent):
        """–°–µ–∫—Ü–∏—è –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π"""
        section = ctk.CTkFrame(parent)
        section.pack(fill="x", padx=20, pady=10)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏
        section_title = ctk.CTkLabel(
            section,
            text="üöÄ –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è",
            font=ctk.CTkFont(size=16, weight="bold")
        )
        section_title.pack(pady=(15, 10), padx=15, anchor="w")
        
        # –ë–æ–ª—å—à–∞—è –∫–Ω–æ–ø–∫–∞ "–í—Å—ë —Å—Ä–∞–∑—É"
        all_btn = ctk.CTkButton(
            section,
            text="üöÄ –ü–û–õ–ù–´–ô –¶–ò–ö–õ (9 —à–∞–≥–æ–≤): –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ ‚Üí –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ‚Üí –û–±–æ–∑–Ω–∞—á–µ–Ω–∏—è ‚Üí \n–≠–∫—Å–ø–æ—Ä—Ç DXF ‚Üí –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ DXF ‚Üí –ß–µ—Ä—Ç–µ–∂–∏ ‚Üí BMP ‚Üí –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è ‚Üí –ì–æ—Ç–æ–≤–æ!",
            command=self.do_everything,
            height=60,
            font=ctk.CTkFont(size=13, weight="bold"),
            fg_color="#2B7A0B",
            hover_color="#1F5808"
        )
        all_btn.pack(fill="x", padx=15, pady=(0, 10))
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        buttons_frame = ctk.CTkFrame(section, fg_color="transparent")
        buttons_frame.pack(fill="x", padx=15, pady=(0, 15))
        
        info_btn = ctk.CTkButton(
            buttons_frame,
            text="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ",
            command=self.show_project_info,
            height=35
        )
        info_btn.pack(side="left", fill="x", expand=True, padx=(0, 5))
        
        template_btn = ctk.CTkButton(
            buttons_frame,
            text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ —à–∞–±–ª–æ–Ω",
            command=self.save_as_template,
            height=35,
            fg_color="#9B59B6",
            hover_color="#7D3C98"
        )
        template_btn.pack(side="left", fill="x", expand=True, padx=(5, 0))
    
    # =========================
    # –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô
    # =========================
    
    def select_source(self):
        """–í—ã–±–æ—Ä –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞"""
        folder = filedialog.askdirectory(title="–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞")
        if folder:
            self.source_entry.delete(0, 'end')
            self.source_entry.insert(0, folder)
            self.logger.info(f"–í—ã–±—Ä–∞–Ω –∏—Å—Ö–æ–¥–Ω—ã–π –ø—Ä–æ–µ–∫—Ç: {folder}")
    
    def select_target(self):
        """–í—ã–±–æ—Ä —Ü–µ–ª–µ–≤–æ–π –ø–∞–ø–∫–∏"""
        folder = filedialog.askdirectory(title="–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é –ø–∞–ø–∫—É")
        if folder:
            self.target_entry.delete(0, 'end')
            self.target_entry.insert(0, folder)
            self.logger.info(f"–í—ã–±—Ä–∞–Ω–∞ —Ü–µ–ª–µ–≤–∞—è –ø–∞–ø–∫–∞: {folder}")
    
    def copy_project(self):
        """–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞"""
        if self.is_processing:
            self.logger.warning("‚ö†Ô∏è –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏!")
            return
        
        source = self.source_entry.get().strip()
        target = self.target_entry.get().strip()
        project_name = self.project_name_entry.get().strip()
        
        if not source or not target or not project_name:
            self.logger.error("‚ùå –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!")
            return
        
        def task():
            self.start_processing()
            try:
                result = self.copier.copy_project(source, target, project_name)
                
                if result['success']:
                    self.current_project_path = result['copied_path']
                    self.logger.info(f"‚úÖ –ü—Ä–æ–µ–∫—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: {self.current_project_path}\n")
                else:
                    self.logger.error(f"‚ùå {result['error']}\n")
            finally:
                self.stop_processing()
        
        threading.Thread(target=task, daemon=True).start()
    
    def rename_assembly(self):
        """–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–π —Å–±–æ—Ä–∫–∏"""
        if self.is_processing:
            self.logger.warning("‚ö†Ô∏è –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏!")
            return
        
        project_path = self.current_project_path or self.source_entry.get().strip()
        project_name = self.project_name_entry.get().strip()
        
        if not project_path or not project_name:
            self.logger.error("‚ùå –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É –∏ –∏–º—è!")
            return
        
        def task():
            self.start_processing()
            try:
                result = self.copier.rename_main_assembly(project_path, project_name)
                
                if result['success']:
                    self.logger.info(f"‚úÖ –°–±–æ—Ä–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∞!\n")
                else:
                    self.logger.error(f"‚ùå {result['error']}\n")
            finally:
                self.stop_processing()
        
        threading.Thread(target=task, daemon=True).start()
    
    def update_variables(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö"""
        if self.is_processing:
            self.logger.warning("‚ö†Ô∏è –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏!")
            return
        
        project_path = self.current_project_path or self.source_entry.get().strip()
        
        try:
            h = int(self.h_entry.get().strip())
            b1 = int(self.b1_entry.get().strip())
            l1 = int(self.l1_entry.get().strip())
        except ValueError:
            self.logger.error("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏!")
            return
        
        if not project_path:
            self.logger.error("‚ùå –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É!")
            return
        
        def task():
            self.start_processing()
            try:
                result = self.updater.update_project_variables(project_path, h, b1, l1)
                
                if result['success']:
                    self.logger.info(f"\n‚úÖ –ü–ï–†–ï–ú–ï–ù–ù–´–ï –£–°–ü–ï–®–ù–û –û–ë–ù–û–í–õ–ï–ù–´!")
                    self.logger.info(f"   –û–±–Ω–æ–≤–ª–µ–Ω–æ –¥–µ—Ç–∞–ª–µ–π: {result['parts_updated']}")
                    self.logger.info(f"   –ü–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤ –¥–µ—Ç–∞–ª—è—Ö: {result['total_vars_in_parts']}\n")
                else:
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∏: {result['errors']}\n")
            finally:
                self.stop_processing()
        
        threading.Thread(target=task, daemon=True).start()
    
    def do_everything(self):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å—Ä–∞–∑—É"""
        if self.is_processing:
            self.logger.warning("‚ö†Ô∏è –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏!")
            return
        
        source = self.source_entry.get().strip()
        target = self.target_entry.get().strip()
        project_name = self.project_name_entry.get().strip()
        
        try:
            h = int(self.h_entry.get().strip())
            b1 = int(self.b1_entry.get().strip())
            l1 = int(self.l1_entry.get().strip())
        except ValueError:
            self.logger.error("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏!")
            return
        
        if not source or not target or not project_name:
            self.logger.error("‚ùå –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!")
            return
        
        def task():
            self.start_processing()
            try:
                order_number = self.order_entry.get().strip() or None
                
                self.logger.info("\n" + "="*60)
                self.logger.info("üöÄ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ì–û –¶–ò–ö–õ–ê")
                self.logger.info("="*60)
                self.logger.info(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã: H={h}, B1={b1}, L1={l1}")
                if order_number:
                    self.logger.info(f"–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {order_number}")
                self.logger.info("")
                
                # –®–∞–≥ 1: –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ
                self.logger.info("–®–ê–ì 1/9: –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞...")
                result1 = self.copier.copy_project(source, target, project_name)
                
                if not result1['success']:
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: {result1['error']}")
                    return
                
                self.current_project_path = result1['copied_path']
                self.logger.info(f"‚úÖ –ü—Ä–æ–µ–∫—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω\n")
                time.sleep(1)
                
                # –®–∞–≥ 2: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
                self.logger.info("–®–ê–ì 2/9: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö...")
                result2 = self.updater.update_project_variables(self.current_project_path, h, b1, l1)
                
                if not result2['success']:
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö: {result2['errors']}")
                    return
                
                self.logger.info(f"‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã (–¥–µ—Ç–∞–ª–µ–π: {result2['parts_updated']})\n")
                time.sleep(1)
                
                # –®–∞–≥ 3: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏–π (marking) + –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
                self.logger.info("–®–ê–ì 3/9: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏–π –∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ...")
                result3 = self.designation_updater.update_all_designations(
                    self.current_project_path, h, b1, l1, order_number
                )
                
                if not result3['success']:
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏–π: {result3.get('error', 'Unknown')}")
                    self.logger.error(f"   –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–æ–∫: {result3.get('errors', [])}")
                    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
                
                self.logger.info(f"‚úÖ –û–±–æ–∑–Ω–∞—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã (–¥–µ—Ç–∞–ª–µ–π: {result3.get('parts_renamed', 0)})\n")
                time.sleep(1)
                
                # –®–∞–≥ 4: –≠–∫—Å–ø–æ—Ä—Ç —Ä–∞–∑–≤–µ—Ä—Ç–æ–∫ –≤ DXF
                self.logger.info("–®–ê–ì 4/9: –≠–∫—Å–ø–æ—Ä—Ç —Ä–∞–∑–≤–µ—Ä—Ç–æ–∫ –≤ DXF...")
                
                from pathlib import Path
                dxf_folder = Path(self.current_project_path) / "DXF"
                dxf_folder.mkdir(exist_ok=True)
                
                result4_export = self.dxf_exporter.export_all_unfoldings(
                    self.current_project_path,
                    str(dxf_folder)
                )
                
                if result4_export['success']:
                    self.logger.info(f"‚úÖ DXF —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã (—Ñ–∞–π–ª–æ–≤: {result4_export['exported']}/{result4_export['total']})\n")
                else:
                    self.logger.warning(f"‚ö†Ô∏è DXF —ç–∫—Å–ø–æ—Ä—Ç: {result4_export.get('errors', ['–ù–µ—Ç —Ä–∞–∑–≤–µ—Ä—Ç–æ–∫'])}\n")
                
                time.sleep(1)
                
                # –®–∞–≥ 5: –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ DXF
                self.logger.info("–®–ê–ì 5/9: –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ DXF —Ñ–∞–π–ª–æ–≤...")
                result5 = self.dxf_renamer.rename_dxf_files(self.current_project_path, order_number)
                
                if result5['success']:
                    self.logger.info(f"‚úÖ DXF –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω—ã (—Ñ–∞–π–ª–æ–≤: {result5['renamed_count']})\n")
                else:
                    self.logger.warning(f"‚ö†Ô∏è DXF: {result5.get('errors', ['–ù–µ—Ç DXF –ø–∞–ø–∫–∏'])}\n")
                
                time.sleep(1)
                
                # –®–∞–≥ 6: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä—Ç–µ–∂–µ–π
                self.logger.info("–®–ê–ì 6/9: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä—Ç–µ–∂–µ–π...")
                result6 = self.drawing_updater.update_all_drawings(self.current_project_path)
                
                if result6['success']:
                    self.logger.info(f"‚úÖ –ß–µ—Ä—Ç–µ–∂–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã (–æ–±–Ω–æ–≤–ª–µ–Ω–æ: {result6['drawings_updated']}, –æ—à–∏–±–æ–∫: {result6['drawings_failed']})\n")
                else:
                    self.logger.warning(f"‚ö†Ô∏è –ß–µ—Ä—Ç–µ–∂–∏: {result6.get('errors', ['Unknown'])}\n")
                
                time.sleep(1)
                
                # –®–∞–≥ 7: –≠–∫—Å–ø–æ—Ä—Ç —á–µ—Ä—Ç–µ–∂–µ–π –≤ BMP
                self.logger.info("–®–ê–ì 7/9: –≠–∫—Å–ø–æ—Ä—Ç —á–µ—Ä—Ç–µ–∂–µ–π –≤ BMP...")
                
                # –ù–∞—Ö–æ–¥–∏–º —á–µ—Ä—Ç–µ–∂–∏ (–∏—Å–∫–ª—é—á–∞—è —Ä–∞–∑–≤–µ—Ä—Ç–∫–∏)
                drawing_files = self.drawing_exporter.find_drawing_files(
                    self.current_project_path, 
                    exclude_unfoldings=True
                )
                
                if drawing_files:
                    self.logger.info(f"–ù–∞–π–¥–µ–Ω–æ —á–µ—Ä—Ç–µ–∂–µ–π –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞: {len(drawing_files)}")
                    
                    # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —á–µ—Ä—Ç–µ–∂
                    exported_count = 0
                    for drawing_file in drawing_files:
                        from pathlib import Path
                        drawing_path = Path(drawing_file)
                        output_path = str(drawing_path.with_suffix('.bmp'))
                        
                        export_result = self.drawing_exporter.export_drawing_to_image(
                            str(drawing_file),
                            output_path,
                            format_type='BMP',
                            resolution=300
                        )
                        
                        if export_result['success']:
                            exported_count += 1
                            self.logger.info(f"  ‚úì {drawing_path.name} ‚Üí BMP")
                        else:
                            self.logger.warning(f"  ‚úó {drawing_path.name}: {export_result.get('error', 'Unknown')}")
                    
                    self.logger.info(f"‚úÖ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ BMP: {exported_count}/{len(drawing_files)}\n")
                else:
                    self.logger.info("  –ß–µ—Ä—Ç–µ–∂–µ–π –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\n")
                    exported_count = 0
                
                time.sleep(1)
                
                # –®–∞–≥ 8: –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è BMP —Ñ–∞–π–ª–æ–≤
                self.logger.info("–®–ê–ì 8/9: –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è BMP —Ñ–∞–π–ª–æ–≤...")
                result8 = self.bmp_organizer.organize_bmp_files(self.current_project_path)
                
                if result8['success'] and result8['moved_count'] > 0:
                    self.logger.info(f"‚úÖ BMP —Ñ–∞–π–ª—ã –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω—ã: {result8['moved_count']} ‚Üí –ø–∞–ø–∫–∞ BMP/\n")
                else:
                    self.logger.info(f"  –ù–µ—Ç BMP —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏\n")
                
                time.sleep(1)
                
                # –®–∞–≥ 9: –ò—Ç–æ–≥–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                self.logger.info("–®–ê–ì 9/9: –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞...")
                
                # –ò—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                self.logger.info("\n" + "="*60)
                self.logger.info("üéâ –í–°–ï –û–ü–ï–†–ê–¶–ò–ò –í–´–ü–û–õ–ù–ï–ù–´ –£–°–ü–ï–®–ù–û!")
                self.logger.info("="*60)
                self.logger.info(f"üìÅ –ü—Ä–æ–µ–∫—Ç: {self.current_project_path}")
                self.logger.info(f"üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: H={h}, B1={b1}, L1={l1}")
                if order_number:
                    self.logger.info(f"üè∑Ô∏è –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {order_number}")
                self.logger.info("")
                self.logger.info("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
                self.logger.info(f"  ‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {result2.get('total_vars_in_parts', 0)}")
                self.logger.info(f"  ‚úÖ –î–µ—Ç–∞–ª–µ–π –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ: {result3.get('parts_renamed', 0)}")
                self.logger.info(f"  ‚úÖ DXF —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {result4_export.get('exported', 0)}")
                self.logger.info(f"  ‚úÖ DXF –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ: {result5.get('renamed_count', 0)}")
                self.logger.info(f"  ‚úÖ –ß–µ—Ä—Ç–µ–∂–µ–π –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {result6.get('drawings_updated', 0)}")
                self.logger.info(f"  ‚úÖ BMP —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {exported_count if 'exported_count' in locals() else 0}")
                self.logger.info("="*60 + "\n")
                
            except Exception as e:
                self.logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
                import traceback
                self.logger.error(traceback.format_exc())
            finally:
                self.stop_processing()
        
        threading.Thread(target=task, daemon=True).start()
    
    def show_project_info(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ"""
        project_path = self.current_project_path or self.source_entry.get().strip()
        
        if not project_path:
            self.logger.error("‚ùå –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É!")
            return
        
        info = self.copier.get_project_info(project_path)
        
        self.logger.info("\n" + "="*60)
        self.logger.info("‚ÑπÔ∏è –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–†–û–ï–ö–¢–ï")
        self.logger.info("="*60)
        self.logger.info(f"üìÅ –ü—É—Ç—å: {project_path}")
        self.logger.info(f"üîß –°–±–æ—Ä–æ–∫ (.a3d): {len(info['assembly_files'])}")
        self.logger.info(f"üìê –ß–µ—Ä—Ç–µ–∂–µ–π (.cdw): {len(info['drawing_files'])}")
        self.logger.info(f"‚öôÔ∏è –î–µ—Ç–∞–ª–µ–π (.m3d): {len(info['part_files'])}")
        self.logger.info(f"üìÑ –î—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–æ–≤: {len(info['other_files'])}")
        self.logger.info(f"üìä –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {info['total_files']}")
        self.logger.info("="*60 + "\n")
    
    def save_as_template(self):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–µ–∫—Ç –∫–∞–∫ —à–∞–±–ª–æ–Ω"""
        project_path = self.current_project_path or self.source_entry.get().strip()
        
        if not project_path:
            self.logger.error("‚ùå –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É!")
            return
        
        # –î–∏–∞–ª–æ–≥ –¥–ª—è –≤–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —à–∞–±–ª–æ–Ω–µ
        dialog = ctk.CTkInputDialog(
            text="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞:",
            title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ —à–∞–±–ª–æ–Ω"
        )
        template_name = dialog.get_input()
        
        if not template_name:
            self.logger.info("–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –µ—Å–ª–∏ –≤–≤–µ–¥–µ–Ω—ã
        parameters = {}
        try:
            if self.h_entry.get().strip():
                parameters['H'] = int(self.h_entry.get().strip())
            if self.b1_entry.get().strip():
                parameters['B1'] = int(self.b1_entry.get().strip())
            if self.l1_entry.get().strip():
                parameters['L1'] = int(self.l1_entry.get().strip())
        except:
            pass
        
        # –û–ø–∏—Å–∞–Ω–∏–µ
        description = f"–®–∞–±–ª–æ–Ω —Å–æ–∑–¥–∞–Ω –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞ {Path(project_path).name}"
        
        # –°–æ–∑–¥–∞–µ–º —à–∞–±–ª–æ–Ω
        self.logger.info(f"\nüíæ –°–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ '{template_name}'...")
        
        result = self.template_manager.add_template_from_project(
            project_path=project_path,
            template_name=template_name,
            description=description,
            parameters=parameters,
            tags=['ZVD', 'LITE']
        )
        
        if result['success']:
            self.logger.info(f"‚úÖ –®–∞–±–ª–æ–Ω '{template_name}' —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
            self.logger.info(f"   ID: {result['template_id']}")
            self.logger.info(f"   –í—Å–µ–≥–æ —à–∞–±–ª–æ–Ω–æ–≤: {len(self.template_manager.list_templates())}\n")
        else:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞: {result['error']}\n")
    
    def clear_log(self):
        """–û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥"""
        self.log_text.configure(state='normal')
        self.log_text.delete('1.0', 'end')
        self.log_text.configure(state='disabled')
        self.logger.info("–õ–æ–≥ –æ—á–∏—â–µ–Ω\n")
    
    def save_log(self):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–æ–≥ –≤ —Ñ–∞–π–ª"""
        filename = filedialog.asksaveasfilename(
            defaultextension=".txt",
            filetypes=[("Text files", "*.txt"), ("All files", "*.*")],
            initialfile=f"kompas_log_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
        )
        
        if filename:
            try:
                with open(filename, 'w', encoding='utf-8') as f:
                    f.write(self.log_text.get('1.0', 'end'))
                self.logger.info(f"‚úÖ –õ–æ–≥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {filename}\n")
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}\n")
    
    def start_processing(self):
        """–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä)"""
        self.is_processing = True
        self.progress_bar.pack(fill="x", padx=20, pady=10)
        self.progress_bar.start()
    
    def stop_processing(self):
        """–ö–æ–Ω–µ—Ü –æ–±—Ä–∞–±–æ—Ç–∫–∏ (—Å–∫—Ä—ã—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä)"""
        self.is_processing = False
        self.progress_bar.stop()
        self.progress_bar.pack_forget()


def main():
    """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    app = KompasManagerGUI()
    app.mainloop()


if __name__ == "__main__":
    main()

