#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üîç –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ø—Ä–æ–µ–∫—Ç–æ–≤ –ö–û–ú–ü–ê–°-3D –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤
–ò–∑—É—á–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞ –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
"""

import sys
import json
import logging
from pathlib import Path
from datetime import datetime
from components.base_component import BaseKompasComponent

sys.stdout.reconfigure(encoding='utf-8')
sys.stderr.reconfigure(encoding='utf-8')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s | %(levelname)-8s | %(message)s',
    datefmt='%H:%M:%S',
    handlers=[
        logging.FileHandler('template_analysis.log', encoding='utf-8'),
        logging.StreamHandler(sys.stdout)
    ]
)


class ProjectTemplateAnalyzer(BaseKompasComponent):
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞"""
    
    def __init__(self):
        super().__init__()
        self.logger = logging.getLogger('TemplateAnalyzer')
    
    def analyze_project(self, project_path: str) -> dict:
        """
        –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–µ–∫—Ç–∞
        
        Args:
            project_path: –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞
            
        Returns:
            dict: –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ
        """
        self.logger.info("="*60)
        self.logger.info("üîç –ê–ù–ê–õ–ò–ó –ü–†–û–ï–ö–¢–ê –î–õ–Ø –°–û–ó–î–ê–ù–ò–Ø –®–ê–ë–õ–û–ù–ê")
        self.logger.info("="*60)
        
        project_path = Path(project_path)
        
        if not project_path.exists():
            return {'success': False, 'error': '–ü–∞–ø–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}
        
        analysis = {
            'success': True,
            'project_path': str(project_path),
            'project_name': project_path.name,
            'analyzed_at': datetime.now().isoformat(),
            'files': {},
            'structure': {},
            'variables': {},
            'recommendations': []
        }
        
        # –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        self.logger.info(f"\nüìÅ –ü—Ä–æ–µ–∫—Ç: {project_path.name}")
        analysis['files'] = self._analyze_files(project_path)
        
        # –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã (—Å–±–æ—Ä–∫–∞ + –¥–µ—Ç–∞–ª–∏)
        analysis['structure'] = self._analyze_structure(analysis['files'])
        
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ —Å–±–æ—Ä–∫–∏
        assembly_file = self._find_main_assembly(project_path)
        if assembly_file:
            analysis['variables'] = self._extract_variables(assembly_file)
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        analysis['recommendations'] = self._generate_recommendations(analysis)
        
        # –í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤
        self._print_analysis_summary(analysis)
        
        return analysis
    
    def _analyze_files(self, project_path: Path) -> dict:
        """–ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç–µ"""
        files = {
            'assembly_files': [],
            'part_files': [],
            'drawing_files': [],
            'unfolding_files': [],
            'dxf_files': [],
            'pdf_files': [],
            'bmp_files': [],
            'other_files': [],
            'temp_files': []
        }
        
        for file in project_path.rglob('*'):
            if not file.is_file():
                continue
            
            suffix = file.suffix.lower()
            name = file.name
            relative = file.relative_to(project_path)
            
            file_info = {
                'name': name,
                'path': str(file),
                'relative_path': str(relative),
                'size': file.stat().st_size
            }
            
            # –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            if name.startswith('~$') or suffix in ['.bak', '.tmp']:
                files['temp_files'].append(file_info)
            # –°–±–æ—Ä–∫–∏
            elif suffix == '.a3d':
                files['assembly_files'].append(file_info)
            # –î–µ—Ç–∞–ª–∏
            elif suffix == '.m3d':
                files['part_files'].append(file_info)
            # –ß–µ—Ä—Ç–µ–∂–∏
            elif suffix == '.cdw':
                # –†–∞–∑–ª–∏—á–∞–µ–º –æ–±—ã—á–Ω—ã–µ —á–µ—Ä—Ç–µ–∂–∏ –∏ —Ä–∞–∑–≤–µ—Ä—Ç–∫–∏
                if '—Ä–∞–∑–≤–µ—Ä—Ç–∫–∞' in name.lower() or 'razvertka' in name.lower():
                    files['unfolding_files'].append(file_info)
                else:
                    files['drawing_files'].append(file_info)
            # –≠–∫—Å–ø–æ—Ä—Ç–Ω—ã–µ —Ñ–∞–π–ª—ã
            elif suffix == '.dxf':
                files['dxf_files'].append(file_info)
            elif suffix == '.pdf':
                files['pdf_files'].append(file_info)
            elif suffix == '.bmp':
                files['bmp_files'].append(file_info)
            else:
                files['other_files'].append(file_info)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.logger.info(f"\nüìä –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤:")
        self.logger.info(f"  üîß –°–±–æ—Ä–æ–∫ (.a3d):         {len(files['assembly_files'])}")
        self.logger.info(f"  ‚öôÔ∏è  –î–µ—Ç–∞–ª–µ–π (.m3d):        {len(files['part_files'])}")
        self.logger.info(f"  üìê –ß–µ—Ä—Ç–µ–∂–µ–π (.cdw):       {len(files['drawing_files'])}")
        self.logger.info(f"  üìè –†–∞–∑–≤–µ—Ä—Ç–æ–∫ (.cdw):      {len(files['unfolding_files'])}")
        self.logger.info(f"  üìÑ DXF —Ñ–∞–π–ª–æ–≤:            {len(files['dxf_files'])}")
        self.logger.info(f"  üìë PDF —Ñ–∞–π–ª–æ–≤:            {len(files['pdf_files'])}")
        self.logger.info(f"  üñºÔ∏è  BMP —Ñ–∞–π–ª–æ–≤:            {len(files['bmp_files'])}")
        self.logger.info(f"  ‚ö†Ô∏è  –í—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤:     {len(files['temp_files'])}")
        
        return files
    
    def _analyze_structure(self, files: dict) -> dict:
        """–ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞"""
        structure = {
            'main_assembly': None,
            'parts': [],
            'drawing_mapping': {}
        }
        
        # –ù–∞—Ö–æ–¥–∏–º –≥–ª–∞–≤–Ω—É—é —Å–±–æ—Ä–∫—É (–≤ –∫–æ—Ä–Ω–µ, –Ω–µ –≤ –ø–æ–¥–ø–∞–ø–∫–∞—Ö)
        for assembly in files['assembly_files']:
            if '\\' not in assembly['relative_path'] and '/' not in assembly['relative_path']:
                structure['main_assembly'] = assembly
                break
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ (–∏—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω: NNN - –ù–∞–∑–≤–∞–Ω–∏–µ)
        import re
        part_pattern = re.compile(r'^(\d{3})\s*-\s*(.+)\.m3d$', re.IGNORECASE)
        
        for part in files['part_files']:
            match = part_pattern.match(part['name'])
            if match:
                part_number = match.group(1)
                part_name = match.group(2)
                
                part_info = {
                    'number': part_number,
                    'name': part_name,
                    'file': part['name'],
                    'path': part['path'],
                    'drawings': [],
                    'unfoldings': []
                }
                
                # –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —á–µ—Ä—Ç–µ–∂–∏
                drawing_pattern = f"{part_number}0"  # 001 -> 0010
                for drawing in files['drawing_files']:
                    if drawing['name'].startswith(drawing_pattern):
                        part_info['drawings'].append(drawing['name'])
                
                # –ò—â–µ–º —Ä–∞–∑–≤–µ—Ä—Ç–∫–∏
                for unfolding in files['unfolding_files']:
                    if part_number in unfolding['name']:
                        part_info['unfoldings'].append(unfolding['name'])
                
                structure['parts'].append(part_info)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –ø–æ –Ω–æ–º–µ—Ä—É
        structure['parts'].sort(key=lambda x: x['number'])
        
        self.logger.info(f"\nüîß –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞:")
        if structure['main_assembly']:
            self.logger.info(f"  üì¶ –ì–ª–∞–≤–Ω–∞—è —Å–±–æ—Ä–∫–∞: {structure['main_assembly']['name']}")
        
        self.logger.info(f"\n  ‚öôÔ∏è  –î–µ—Ç–∞–ª–∏ ({len(structure['parts'])}):")
        for part in structure['parts']:
            self.logger.info(f"    {part['number']} - {part['name']}")
            if part['drawings']:
                self.logger.info(f"         ‚îî‚îÄ –ß–µ—Ä—Ç–µ–∂–∏: {', '.join(part['drawings'])}")
            if part['unfoldings']:
                self.logger.info(f"         ‚îî‚îÄ –†–∞–∑–≤–µ—Ä—Ç–∫–∏: {', '.join(part['unfoldings'])}")
        
        return structure
    
    def _find_main_assembly(self, project_path: Path) -> Path:
        """–ù–∞—Ö–æ–¥–∏—Ç –≥–ª–∞–≤–Ω—É—é —Å–±–æ—Ä–∫—É (.a3d) –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞"""
        for file in project_path.glob('*.a3d'):
            if not file.name.startswith('~$'):
                return file
        return None
    
    def _extract_variables(self, assembly_file: Path) -> dict:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ —Å–±–æ—Ä–∫–∏"""
        self.logger.info(f"\nüîç –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ —Å–±–æ—Ä–∫–∏...")
        
        variables = {
            'extracted': False,
            'base_variables': {},
            'dependent_variables': {},
            'all_variables': {}
        }
        
        try:
            if not self.connect_to_kompas():
                self.logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ö–û–ú–ü–ê–°-3D")
                return variables
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
            self.close_all_documents()
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–±–æ—Ä–∫—É
            if not self.open_document(str(assembly_file)):
                self.logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Å–±–æ—Ä–∫—É")
                return variables
            
            doc = self.get_active_document()
            if not doc:
                return variables
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
            try:
                # –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö (–∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –ö–û–ú–ü–ê–° API)
                vars_mng = doc.ParametersManager
                
                # –ë–∞–∑–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ (–∑–∞–¥–∞—é—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º)
                base_vars = ['H', 'B1', 'L1', 'B2', 'A2']
                
                self.logger.info(f"\nüìä –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ —Å–±–æ—Ä–∫–µ:")
                
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
                for i in range(vars_mng.Count):
                    try:
                        param = vars_mng.Item(i)
                        var_name = param.Name
                        var_value = param.Value
                        
                        var_info = {
                            'name': var_name,
                            'value': var_value,
                            'type': 'base' if var_name in base_vars else 'dependent'
                        }
                        
                        variables['all_variables'][var_name] = var_info
                        
                        if var_name in base_vars:
                            variables['base_variables'][var_name] = var_value
                            self.logger.info(f"  ‚úì {var_name} = {var_value} (–±–∞–∑–æ–≤–∞—è)")
                        else:
                            variables['dependent_variables'][var_name] = var_value
                            self.logger.info(f"  ‚Ä¢ {var_name} = {var_value}")
                        
                    except Exception as e:
                        self.logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é {i}: {e}")
                
                variables['extracted'] = True
                
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö: {e}")
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
            self.close_document(save=False)
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –ö–û–ú–ü–ê–°: {e}")
        finally:
            self.disconnect_from_kompas()
        
        return variables
    
    def _generate_recommendations(self, analysis: dict) -> list:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é —Å—Ç—Ä—É–∫—Ç—É—Ä—ã"""
        recommendations = []
        
        files = analysis['files']
        structure = analysis['structure']
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ BMP —Ñ–∞–π–ª—ã –≤ –∫–æ—Ä–Ω–µ
        if files['bmp_files']:
            bmp_in_root = [f for f in files['bmp_files'] if '\\' not in f['relative_path']]
            if bmp_in_root:
                recommendations.append({
                    'type': 'file_organization',
                    'priority': 'high',
                    'message': f"–ù–∞–π–¥–µ–Ω–æ {len(bmp_in_root)} BMP —Ñ–∞–π–ª–æ–≤ –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É 'BMP' –∏ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –∏—Ö —Ç—É–¥–∞.",
                    'action': 'create_bmp_folder'
                })
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        if files['temp_files']:
            recommendations.append({
                'type': 'cleanup',
                'priority': 'medium',
                'message': f"–ù–∞–π–¥–µ–Ω–æ {len(files['temp_files'])} –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏.",
                'action': 'cleanup_temp_files'
            })
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤
        if not structure['main_assembly']:
            recommendations.append({
                'type': 'structure',
                'priority': 'critical',
                'message': "–ì–ª–∞–≤–Ω–∞—è —Å–±–æ—Ä–∫–∞ (.a3d) –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞",
                'action': 'check_structure'
            })
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –¥–µ—Ç–∞–ª–µ–π –∏ —á–µ—Ä—Ç–µ–∂–µ–π
        parts_without_drawings = [p for p in structure['parts'] if not p['drawings']]
        if parts_without_drawings:
            recommendations.append({
                'type': 'completeness',
                'priority': 'medium',
                'message': f"–£ {len(parts_without_drawings)} –¥–µ—Ç–∞–ª–µ–π –Ω–µ—Ç —á–µ—Ä—Ç–µ–∂–µ–π",
                'action': 'create_missing_drawings',
                'details': [p['name'] for p in parts_without_drawings]
            })
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        if not analysis['variables'].get('extracted'):
            recommendations.append({
                'type': 'variables',
                'priority': 'high',
                'message': "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ —Å–±–æ—Ä–∫–∏",
                'action': 'check_variables'
            })
        elif len(analysis['variables'].get('base_variables', {})) < 3:
            recommendations.append({
                'type': 'variables',
                'priority': 'high',
                'message': "–ù–µ –≤—Å–µ –±–∞–∑–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ (H, B1, L1) –Ω–∞–π–¥–µ–Ω—ã –≤ —Å–±–æ—Ä–∫–µ",
                'action': 'check_base_variables'
            })
        
        return recommendations
    
    def _print_analysis_summary(self, analysis: dict):
        """–í—ã–≤–æ–¥–∏—Ç –∏—Ç–æ–≥–æ–≤—É—é —Å–≤–æ–¥–∫—É –∞–Ω–∞–ª–∏–∑–∞"""
        self.logger.info("\n" + "="*60)
        self.logger.info("üìã –ò–¢–û–ì–û–í–ê–Ø –°–í–û–î–ö–ê")
        self.logger.info("="*60)
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        self.logger.info(f"\nüì¶ –ü—Ä–æ–µ–∫—Ç: {analysis['project_name']}")
        self.logger.info(f"üìÅ –ü—É—Ç—å: {analysis['project_path']}")
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        if analysis['variables'].get('extracted'):
            base_vars = analysis['variables']['base_variables']
            self.logger.info(f"\nüîß –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:")
            for var, value in base_vars.items():
                self.logger.info(f"  {var} = {value}")
        
        # –°—Ç—Ä—É–∫—Ç—É—Ä–∞
        structure = analysis['structure']
        self.logger.info(f"\nüìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞:")
        self.logger.info(f"  –î–µ—Ç–∞–ª–µ–π: {len(structure['parts'])}")
        self.logger.info(f"  –ß–µ—Ä—Ç–µ–∂–µ–π: {len(analysis['files']['drawing_files'])}")
        self.logger.info(f"  –†–∞–∑–≤–µ—Ä—Ç–æ–∫: {len(analysis['files']['unfolding_files'])}")
        self.logger.info(f"  DXF —Ñ–∞–π–ª–æ–≤: {len(analysis['files']['dxf_files'])}")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if analysis['recommendations']:
            self.logger.info(f"\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ ({len(analysis['recommendations'])}):")
            for i, rec in enumerate(analysis['recommendations'], 1):
                priority_icon = {
                    'critical': 'üî¥',
                    'high': 'üü†',
                    'medium': 'üü°',
                    'low': 'üü¢'
                }.get(rec['priority'], '‚ö™')
                
                self.logger.info(f"  {priority_icon} {i}. [{rec['type'].upper()}] {rec['message']}")
        
        self.logger.info("\n" + "="*60)
    
    def save_analysis_report(self, analysis: dict, output_file: str = 'template_analysis_report.json'):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç—á–µ—Ç –∞–Ω–∞–ª–∏–∑–∞ –≤ JSON"""
        try:
            with open(output_file, 'w', encoding='utf-8') as f:
                json.dump(analysis, f, ensure_ascii=False, indent=2)
            
            self.logger.info(f"\nüíæ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_file}")
            
            # –¢–∞–∫–∂–µ —Å–æ–∑–¥–∞–µ–º markdown –≤–µ—Ä—Å–∏—é
            md_file = output_file.replace('.json', '.md')
            self._create_markdown_report(analysis, md_file)
            
            return True
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")
            return False
    
    def _create_markdown_report(self, analysis: dict, output_file: str):
        """–°–æ–∑–¥–∞–µ—Ç –æ—Ç—á–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown"""
        md_content = f"""# üìã –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞

## üì¶ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ

- **–ù–∞–∑–≤–∞–Ω–∏–µ**: {analysis['project_name']}
- **–ü—É—Ç—å**: `{analysis['project_path']}`
- **–î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞**: {analysis['analyzed_at']}

---

## üìä –§–∞–π–ª–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞

| –¢–∏–ø | –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ |
|-----|------------|
| üîß –°–±–æ—Ä–∫–∏ (.a3d) | {len(analysis['files']['assembly_files'])} |
| ‚öôÔ∏è –î–µ—Ç–∞–ª–∏ (.m3d) | {len(analysis['files']['part_files'])} |
| üìê –ß–µ—Ä—Ç–µ–∂–∏ (.cdw) | {len(analysis['files']['drawing_files'])} |
| üìè –†–∞–∑–≤–µ—Ä—Ç–∫–∏ (.cdw) | {len(analysis['files']['unfolding_files'])} |
| üìÑ DXF —Ñ–∞–π–ª—ã | {len(analysis['files']['dxf_files'])} |
| üìë PDF —Ñ–∞–π–ª—ã | {len(analysis['files']['pdf_files'])} |
| üñºÔ∏è BMP —Ñ–∞–π–ª—ã | {len(analysis['files']['bmp_files'])} |
| ‚ö†Ô∏è –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã | {len(analysis['files']['temp_files'])} |

---

## üîß –î–µ—Ç–∞–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞

"""
        
        for part in analysis['structure']['parts']:
            md_content += f"""
### {part['number']} - {part['name']}

- **–§–∞–π–ª**: `{part['file']}`
- **–ß–µ—Ä—Ç–µ–∂–∏**: {', '.join(part['drawings']) if part['drawings'] else '‚ùå –ù–µ—Ç'}
- **–†–∞–∑–≤–µ—Ä—Ç–∫–∏**: {', '.join(part['unfoldings']) if part['unfoldings'] else '‚ùå –ù–µ—Ç'}
"""
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        if analysis['variables'].get('extracted'):
            md_content += "\n---\n\n## üîß –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞\n\n### –ë–∞–∑–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ\n\n"
            for var, value in analysis['variables']['base_variables'].items():
                md_content += f"- **{var}** = {value}\n"
            
            md_content += "\n### –ó–∞–≤–∏—Å–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ\n\n"
            for var, value in analysis['variables']['dependent_variables'].items():
                md_content += f"- {var} = {value}\n"
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if analysis['recommendations']:
            md_content += "\n---\n\n## üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n\n"
            for i, rec in enumerate(analysis['recommendations'], 1):
                priority_emoji = {
                    'critical': 'üî¥',
                    'high': 'üü†',
                    'medium': 'üü°',
                    'low': 'üü¢'
                }.get(rec['priority'], '‚ö™')
                
                md_content += f"{i}. {priority_emoji} **[{rec['type'].upper()}]** {rec['message']}\n"
        
        md_content += "\n---\n\n*–û—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–æ–º –ø—Ä–æ–µ–∫—Ç–æ–≤ –ö–û–ú–ü–ê–°-3D*\n"
        
        try:
            with open(output_file, 'w', encoding='utf-8') as f:
                f.write(md_content)
            self.logger.info(f"üíæ Markdown –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_file}")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Markdown –æ—Ç—á–µ—Ç–∞: {e}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import sys
    
    if len(sys.argv) < 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python project_template_analyzer.py <–ø—É—Ç—å_–∫_–ø—Ä–æ–µ–∫—Ç—É>")
        print("\n–ü—Ä–∏–º–µ—Ä:")
        print('  python project_template_analyzer.py "C:\\Projects\\ZVD.LITE.110.180.1330"')
        return
    
    project_path = sys.argv[1]
    
    analyzer = ProjectTemplateAnalyzer()
    analysis = analyzer.analyze_project(project_path)
    
    if analysis['success']:
        analyzer.save_analysis_report(analysis)
        print("\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        print(f"üìÑ –û—Ç—á–µ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:")
        print(f"  - template_analysis_report.json")
        print(f"  - template_analysis_report.md")
    else:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {analysis.get('error', 'Unknown')}")


if __name__ == "__main__":
    main()

